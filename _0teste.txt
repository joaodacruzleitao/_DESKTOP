cd /usr/local/src
wget http://tar.goaccess.io/goaccess-1.2.tar.gz
tar -xzvf goaccess-1.2.tar.gz
cd goaccess-1.2/
./configure --enable-utf8 --enable-geoip=legacy
make
make install




# Do not remove or change this line as it is a safeguard for the UI editor
###############################################################################
# Copyright 2006-2018, Way to the Web Limited
# URL: http://www.configserver.com
# Email: sales@waytotheweb.com
###############################################################################
# The following is a list of executables (exe) command lines (cmd) and
# usernames (user) that lfd process tracking will ignore.
#
# You must use the following format:
#
# exe:/full/path/to/file
# user:username
# cmd:command line
#
# Or, perl regular expression matching (regex):
#
# pexe:/full/path/to/file as a perl regex[*]
# puser:username as a perl regex[*]
# pcmd:command line as a perl regex[*]
#
# [*]You must remember to escape characters correctly when using regex's, e.g.:
# pexe:/home/.*/public_html/cgi-bin/script\.cgi
# puser:bob\d.*
# pcmd:/home/.*/command\s\to\smatch\s\.pl\s.*
#
# It is strongly recommended that you use command line ignores very carefully
# as any process can change what is reported to the OS.
#
# For more information see readme.txt

exe:/bin/dbus-daemon
exe:/sbin/ntpd
exe:/usr/bin/dbus-daemon
exe:/usr/bin/dbus-daemon-1
exe:/usr/bin/lsmd
exe:/usr/bin/postgres
exe:/usr/bin/spamc
exe:/usr/lib/courier-imap/bin/imapd
exe:/usr/lib/courier-imap/bin/pop3d
exe:/usr/lib/polkit-1/polkitd
exe:/usr/libexec/dovecot/anvil
exe:/usr/libexec/dovecot/auth
exe:/usr/libexec/dovecot/dict
exe:/usr/libexec/dovecot/imap
exe:/usr/libexec/dovecot/imap-login
exe:/usr/libexec/dovecot/lmtp
exe:/usr/libexec/dovecot/pop3
exe:/usr/libexec/dovecot/pop3-login
exe:/usr/libexec/dovecot/quota-status
exe:/usr/libexec/dovecot/stats
exe:/usr/libexec/gam_server
exe:/usr/libexec/hald-addon-acpi
exe:/usr/libexec/hald-addon-keyboard
exe:/usr/libexec/mysqld
exe:/usr/local/apache/bin/httpd
exe:/usr/local/cpanel/3rdparty/bin/analog
exe:/usr/local/cpanel/3rdparty/bin/english/webalizer
exe:/usr/local/cpanel/3rdparty/bin/imapd
exe:/usr/local/cpanel/3rdparty/bin/php
exe:/usr/local/cpanel/3rdparty/bin/webalizer_lang/english
exe:/usr/local/cpanel/3rdparty/php/54/bin/php-cgi
exe:/usr/local/cpanel/3rdparty/php/56/bin/php-cgi
exe:/usr/local/cpanel/3rdparty/php/56/sbin/php-fpm
exe:/usr/local/cpanel/3rdparty/php/54/sbin/php-fpm
exe:/usr/local/cpanel/3rdparty/sbin/mydns
exe:/usr/local/cpanel/3rdparty/sbin/p0f
exe:/usr/local/cpanel/bin/cppop
exe:/usr/local/cpanel/bin/cppop-ssl
exe:/usr/local/cpanel/bin/cpuwatch
exe:/usr/local/cpanel/bin/cpwrap
exe:/usr/local/cpanel/bin/logrunner
exe:/usr/local/cpanel/bin/pkgacct
exe:/usr/local/cpanel/cpanel
exe:/usr/local/cpanel/cpdavd
exe:/usr/local/cpanel/cpsrvd
exe:/usr/local/cpanel/cpsrvd-ssl
exe:/usr/local/libexec/dovecot/imap
exe:/usr/local/libexec/dovecot/imap-login
exe:/usr/local/libexec/dovecot/pop3
exe:/usr/local/libexec/dovecot/pop3-login
exe:/usr/local/urchin/bin/urchinwebd
exe:/usr/sbin/chronyd
exe:/usr/sbin/exim
exe:/usr/sbin/exim
exe:/usr/sbin/hald
exe:/usr/sbin/httpd
exe:/usr/sbin/mysqld
exe:/usr/sbin/mysqld_safe
exe:/usr/sbin/named
exe:/usr/sbin/nscd
exe:/usr/sbin/nsd
exe:/usr/sbin/ntpd
exe:/usr/sbin/proftpd
exe:/usr/sbin/pure-ftpd
exe:/usr/sbin/sshd
exe:/var/cpanel/3rdparty/bin/php
exe:/usr/sbin/pdns_server
exe:/usr/local/cpanel/bin/autossl_check
exe:/usr/local/cpanel/bin/whm_xfer_download-ssl
pexe:^/usr/lib/jvm/java-.*/jre/bin/java$
exe:/usr/libexec/dovecot/indexer-worker
exe:/usr/libexec/dovecot/indexer
pexe:/usr/local/cpanel/3rdparty/bin/git.*
pexe:/usr/local/cpanel/3rdparty/libexec/git-core/git.*
cmd:/bin/sh /usr/bin/mysqld_safe
cmd:/bin/sh /usr/bin/mysqld_safe --basedir=/usr
cmd:spamd child
pcmd:/usr/local/cpanel/3rdparty/bin/python /usr/local/cpanel/3rdparty/mailman/bin/qrunner.*
pcmd:/usr/local/cpanel/3rdparty/bin/python /usr/local/cpanel/3rdparty/mailman/bin/mailmanctl.*
pcmd:/usr/bin/python /usr/local/cpanel/3rdparty/mailman/bin/qrunner.*
pcmd:/usr/bin/python /usr/local/cpanel/3rdparty/mailman/bin/mailmanctl.*
pcmd:/usr/bin/perl /usr/local/cpanel/3rdparty/bin/awstats\.pl.*
pcmd:/usr/bin/perl /usr/local/cpanel/base/awstats\.pl.*
pcmd:cpanellogd - (http|ftp) logs for .*
pcmd:MailScanner:.*
exe:/opt/alt/python35/bin/python3.5
exe:/var/ossec/bin/ossec-monitord
exe:/var/ossec/bin/ossec-analysisd
exe:/usr/local/bin/lsphp
exe:/usr/local/cpanel/3rdparty/bin/webalizer_lang/portuguese
pexe:/opt/alt/php.*/usr/bin/lsphp
pcmd:/usr/sbin/netdata.*
pexe:/opt/alt/php.*
pexe:/opt/cpanel/ea-php.*
pcmd:/opt/cpanel/ea-php.*
pexe:/usr/sbin/imunify360.*
pcmd:/sbin/rpcbind.*
pcmd:bash.*/netdata/.*
pexe:/usr/libexec/netdata.*
pcmd:/usr/bin/python.*/libexec/netdata/.*

4659 6300 1539 4646
05/18
937

bash <(curl -s https://raw.githubusercontent.com/cloudflare/CloudFlare-CPanel/master/cloudflare.install.sh) -k d6f14f8f3e781356a925b6a0736844a4 -n 'Datasource Web Solutions Lda.'

contabilidade@hocnet.pt
smM4Y3jT

fdisk -l 2>/dev/null | egrep "Disk /|/dev/" | sed "s#^/dev/#Part /dev/#" | awk '{print $2}' | sed 's/://' | xargs -n1 -IX sudo sh -c "hexdump -v -s 0x80 -n  2 -e '2/1 \"%x\" \"\\n\"' X | xargs -n1 -IY sh -c \"case  \"Y\" in '48b4') echo X: GRUB 2 v1.96 ;; 'aa75' | '5272') echo X: GRUB Legacy ;; '7c3c') echo X: GRUB 2 v1.97 oder v1.98 ;; '020') echo X: GRUB 2 v1.99 ;; *) echo X: Kein GRUB Y ;; esac\""

mdadm /dev/md0 -r /dev/nvme1n1p1sdb1

highload.onxbtu@zapiermail.com
servers.highload@hocnet.com
7mF010-xO+]H

trigger@applet.ifttt.com

High 5 minute load

crrirwDSBJkZeu

backup:
18:53 - 19:10
IM250kyMtxUutavifaLj


MySQL ROOT PASSWORD: r8bthC4rqdZU3OH4vaKB29T42mVozksyptSFNLJcqWkUUgjOtVxDMkF
User: runcloud
Password: NVzTYtj8Czc_v7YsIWaw0z0Cp5oFV4ZNv5xLr0_nGPcoH8AE_YqtsWu

// *************************************************************
// FUNCAO escreve nos ficheiros as paths necessarias adicionais
// *************************************************************
func xanubi_golang_writefiles () {
	var controle_centos_ubuntu int = 0
	var ficheiro_base string = ".bash_profile"

	// apresenta mensagem de primeira operacao
	fmt.Printf("4) WRITING FILES FOR PATH GOLANG \n")

	// abre o ficheiro /root/.bash_profile para adicionar linhas ao fim
	file, err := os.OpenFile("/root/.bash_profile", os.O_WRONLY|os.O_APPEND, 0644)
    if err != nil {
		// se tiver erro o ficheiro nao existe, logo nao e centos e ubuntu
		controle_centos_ubuntu = 1
	} else {
		ficheiro_base = ".bash_profile"
	}
	// se nao for centos, passa para ficheiro em ubuntu
	if controle_centos_ubuntu == 1 {
		file, err = os.OpenFile("/root/.profile", os.O_WRONLY|os.O_APPEND, 0644)
		ficheiro_base = ".profile"
	}
    if err != nil {
		fmt.Fprintf(os.Stderr, "FAIL, file /root/%s does not exist!!!!\n ERROR: %v\n", ficheiro_base, err)
		os.Exit(-1)
    }
	defer file.Close()

	// adiciona a path GOBIN
	len, err := file.WriteString("export GOBIN=$HOME/projects/bin\n")
    if err != nil {
		fmt.Fprintf(os.Stderr, "FAIL, /root/%s edit!!\n ERROR: %v\n", ficheiro_base, err)
		os.Exit(-1)
    }
	fmt.Fprintf(os.Stderr, "ADDED %d to /root/%s!! \n", len, ficheiro_base)

	// adiciona a path GOPATH
	len2, err := file.WriteString("export GOPATH=$HOME/projects/src\n")
    if err != nil {
		fmt.Fprintf(os.Stderr, "FAIL, /root/%s edit!!\n ERROR: %v\n", ficheiro_base, err)
		os.Exit(-1)
	}
	fmt.Fprintf(os.Stderr, "ADDED %d to /root/%s!! \n", len2, ficheiro_base)


	// cria o ficheiro /etc/profile.d/path.sh e coloca conteudo dentro dele.
    cmd := exec.Command("echo", "export PATH=$PATH:/usr/local/go/bin")

    // open the out file for writing
	outfile, err := os.Create("/etc/profile.d/path.sh")
    if err != nil {
        panic(err)
    }
    defer outfile.Close()
    cmd.Stdout = outfile
    err = cmd.Start(); if err != nil {
        fmt.Fprintf(os.Stderr, "FAIL, /etc/profile.d/path.sh!!\n ERROR: %v\n\n\n", err)
		os.Exit(1)
    }
    cmd.Wait()
	fmt.Fprintf(os.Stderr, "ADDED to %s  \n\n\n", "/etc/profile.d/path.sh!!")

}
// *************************************************************


mysqldump --host=localhost --single-transaction --quick --opt isintell_is > 1.sql



DataSource Control Center 2.1.056.10
Copyright (C) 2012-2050 by
Web site: http://www.datasource.pt

DataSource Software Install comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it
under certain conditions.

 Usage: d- OPTION

 Options:
  -m                         Para trabalhar apenas via MENU
  -u                         Update Geral do Script
  ----------------------------------------------------
     BACKUPS
    -------------------------
  backup_user USER           Copia o backup do USER para o directorio dele
  -4 CHAVE DESTINO           Copia os Backups para o NAS v1 (RSYNC)
  -19                        Copia os Backups para o NAS v2 (FTP)
  -20 DIR/FILE               Retira um backup do NAS, exemplo:
                              daily/ficheiro.tar
  -21                        Retira todos os backups do NAS do daily
  -5 DESTINO USER PASS DIAS  Cria os BACKUPS DIARIOS
  backup_cp_c                Verifica backups cpanel e se estiverem em HANG
                              envia email a avisar e apaga processo
  backup_cp_nfs DATA         Copia backups para o NFS Share /home/1backups
                              DATA - Se quiser colocar data, tipo YYY-MM-DD
  ----------------------------------------------------
     SISTEMA
    -------------------------
  sis_perl                   Instalar Perl Modules para o Nginx
  sis_geoip_u                Update do GEO IP Database para o ModSecurity
  sis_puser USERNAME         Permissoes do user USERNAME
  sis_puser_dir USERNAME DIRECTORIO
                              Permissoes do user USERNAME no DIRECTORIO
  sis_ptodos                 Permissoes todos Users corrige
  sis_php_del                Elimina PHP FCGI Orphan Processes
  sis_tmp                    Limpa temporarios do /tmp
  sis_inode                  Utilizadores com mais de 250.000 ficheiros
  sis_untar FICHEIRO         Desempacota ficheiros TAR, FICHEIRO = Nome
  sis_untargz FICHEIRO       Desempacota ficheiros TAR.GZ, FICHEIRO = Nome
  sis_tar FICHEIRO           Empacota ficheiros criando o FICHEIRO.tar
  sis_targz FICHEIRO         Empacota ficheiros criando o FICHEIRO.tar.gz
  sis_ftpa                   Ve a Actividade de FTP
  sis_filesa                 Ve a Actividade de ficheiros no /public_html
  sis_csf                    Instala ConfigServer CSF Firewall
  sis_mq                     Instala ConfigServer Mail Queues
  sis_mm                     Instala ConfigServer Mail Manager
  sis_msm                    Instala ConfigServer ModSEC Manager
  sis_hds                    Instala o HD Sentinel Linux
  sis_ac                     Limpa os logs todos do apache
  sis_ae                     Limpa o log error_log do apache
  sis_am                     Limpa o log modsec_audit.log do apache
  ----------------------------------------------------
     CLOUDLINUX
    -------------------------
  cloud_mg                   Instala MARIADB
  ----------------------------------------------------
     CPANEL
    -------------------------
  cp_hooks_i HOOK            Instala Hooks do cpanel
                              HOOK = Vazio Instala todos
  cp_hooks_o                 Instala Hooks OBRIGATORIOS se tiver NginX
  ----------------------------------------------------
     NGINX
    -------------------------
  nginx_i                    INSTALA o Nignx de Raiz
  nginx_upstream             UPSTREAM IP's para os sites
  nginx_rpaf                 RPAF e IP's para o Apache 2.2+
  nginx_cflare               CLOUDFLARE e IP's para o Apache 2.4+
  nginx_vhosts               (Re)Cria /etc/nginx/vhosts
  nginx_vh USER A B C        (Re)Cria vhosts para o USER
                               USER = nome do utilizador
                               A = CACHE: 1 ou 0
                               B = X_Frame_Options: 1 ou 0
                               C = HSTS: 1 ou 0
  -12 VHOST                  (Re)Cria o conteudo do VHOST especificado
  nginx_vhost_hook USER      (Re)Cria o conteudo dos vhosts do USER
  nginx_u                    update de /root/nginx
  nginx_c                    (Re)Compila o Nginx
  nginx_config               Actualiza Configs do Nginx
  nginx_ru                   Faz reset ao /etc/nginx/userdata
  nginx_tar                  Empacota Source Nginx
  ----------------------------------------------------
     VARNISH
    -------------------------
  varnish_vhosts             (Re)Cria vhosts configuration
  ----------------------------------------------------
     MYSQL
    -------------------------
  mysql_o                    Optimiza Todo
  ----------------------------------------------------
     MODSECURITY
    -------------------------
  modsec_logs                ModSecurity Apagar Logs Antigos
  modsec_u                   ModSecurity Update das Regras
  modsec_tar                 Empacota Source modsecurity
  modsec_ci                  COMODO Firewall Install
  modsec_clua                Activa o LUA no COMODO Firewall
  ----------------------------------------------------
     SEGURANCA
    -------------------------
  seg_clamav_u               ClamAV Update BDs do ClamAV para
                              armazenar em https://dcc.hocnet.pt
  seg_clamav_c               ClamAV Update BDs do ClamAV nos
                              servidores clientes
  virus_check DIR            Verifica virus no directorio DIR
  virus_check_full           Verifica virus todos alojamentos
  virus_check_daily          Verifica virus todos alojamentos
                              com datas maximo 2 dias
  virus_undelete             Recupera FALSO POSITIVOS do
                              verifica virus no directorio DIR
  virus_undelete_full        Recupera FALSO POSITIVOS do
                              verifica virus todos alojamentos
  virus_undelete_daily       Recupera FALSO POSITIVOS do
                              verifica virus Diario
  seg_maldet_u               MalDet Update das Definicoes
  seg_maldet_ino             Update diario do INOTIFY do MALDET
  seg_maldet_i               Instalar o MALDET


HPkT%GO@,a4NYVQDE#l82Odz+FYA=On,

aff1org
APv8U!v3MX=QPK6]I?o|RS

aff1org_u
F+RtlJb81%Z9C?cQ3zN~^MBW33i%-rCk

 Run `sudo apt-get install -y nodejs` to install Node.js 8.x LTS Carbon and npm
## You may also need development tools to build native addons:
     sudo apt-get install gcc g++ make
## To install the Yarn package manager, run:
     curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
     echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
     sudo apt-get update && sudo apt-get install yarn



======= CENTOS 7 ==============================================================================================
#cloud-config
users:
  - name: hocnetx
    groups: sudo
    shell: /bin/bash
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    ssh-authorized-keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAhbuqp5geHOCF2o4FNEGoeMX5Al2FgB+gvSQf072V3rN82JV83pgvoNfjcM59R9r9UrRuypyGJrNhrLW0HVVeVQdtB/e36FAfvuSPgf9ZS8YuDwDo+PMj+/59V5aiFjKVPQtpGvlzg4aPQE1NvqFNvxng2bEJr7YvZm7D8eHILX6cRlbKOkirLT3nipLvKS8HUAgnWQO6srTM9AxahEKdKVq/vXUOuxvClvkqoaA9EZLBzBiSVDfRIAHLSGYCSWpSLjI23ZZYH2j2B6rYHAq5PFgK7gVQ34vTDC00TBUu2zLMusOr7vo5TIh8Ex1B5zOdbsgaeOTjjcNpqW5gMWRj7Q== hocnetx
  - name: kpw
    groups: sudo
    shell: /bin/bash
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    ssh-authorized-keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEA44kKH2pPb3QBQw3jsJRNErMH06ppE2QEwrBlUDk8K7KkYesmUj7YMLold1s3agjbkz2gsxjxhCSvqlz71cLKEHlyUUk96Qab9k8rtiEu2j9etpmOfJBaFcX4BgEArFNKpN4WYZjOjsK2DPU/cAMp4Um8mPdVp/hZiQ62i7myI+uMvfjSYC6tZpY4gNCJROAmnaCXPAG26ssfFWjqv6oANYXd1vITG20im/hGBOpwyz+rMx8pi7/+7nHzfxNWB7yfyCqf6FQojDymLr3KXM3ZjphqG6T0gCSVmMvBRdeG94xUHGm9FtPwpnBn94ANIlNpGcfMCXEO/nZRwoVOZ6gWaw== kriacao
package_update: true
package_upgrade: true
packages:
  - wget
  - nano
runcmd:
  - sed -i -e '/^#Port/s/^.*$/Port 2726/' /etc/ssh/sshd_config
  - sed -i -e '/^#UseDNS/s/^.*$/UseDNS no/' /etc/ssh/sshd_config
  - sed -i -e '$aAllowUsers hocnetx kriacao' /etc/ssh/sshd_config
  - service sshd restart
  - wget https://cyberpanel.net/install.sh -O /usr/local/src/install.sh
  - [ bash, /usr/local/src/install.sh ]
power_state:
  delay: now
  mode: reboot
  message: Bye bye

****** ALTERNATIVA ********************************
power_state:
  timeout: 120
  delay: "+5"
  message: Rebooting in five minutes. Please save your work.
  mode: reboot
======= CENTOS 7 ==============================================================================================


======= UBUNTU ==============================================================================================
>>>>>>>>>>> CONFIG BASE <<<<<<<<
#cloud-config
users:
  - name: hocnetx
    groups: sudo
    shell: /bin/bash
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    ssh-authorized-keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAhbuqp5geHOCF2o4FNEGoeMX5Al2FgB+gvSQf072V3rN82JV83pgvoNfjcM59R9r9UrRuypyGJrNhrLW0HVVeVQdtB/e36FAfvuSPgf9ZS8YuDwDo+PMj+/59V5aiFjKVPQtpGvlzg4aPQE1NvqFNvxng2bEJr7YvZm7D8eHILX6cRlbKOkirLT3nipLvKS8HUAgnWQO6srTM9AxahEKdKVq/vXUOuxvClvkqoaA9EZLBzBiSVDfRIAHLSGYCSWpSLjI23ZZYH2j2B6rYHAq5PFgK7gVQ34vTDC00TBUu2zLMusOr7vo5TIh8Ex1B5zOdbsgaeOTjjcNpqW5gMWRj7Q== hocnetx
runcmd:
  - sed -i -e '/dns-nameservers 213.133.100.100 213.133.98.98 213.133.99.99/s/.*$/    dns-nameservers 1.1.1.1 1.0.0.1 213.133.99.99/' /etc/network/interfaces.d/50-cloud-init.cfg
  - sed -i -e '/^Port/s/^.*$/Port 2726/' /etc/ssh/sshd_config
  - sed -i -e '$aAllowUsers hocnetx' /etc/ssh/sshd_config
  - service sshd restart
package_update: true
package_upgrade: true
apt_sources:
  - source: "ppa:ansible/ansible"
packages:
  - software-properties-common
  - ansible
  - docker
  - docker.io
  - git
  - python-pip
power_state:
  timeout: 120
  delay: "+5"
  message: Rebooting in five minutes. Please save your work.
  mode: reboot
>>>>>>>>>>> CONFIG BASE <<<<<<<<

>>>>>>>>>>> CONFIG BASE <<<<<<<<
#cloud-config
users:
  - name: hocnetx
    groups: sudo
    shell: /bin/bash
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    ssh-authorized-keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAhbuqp5geHOCF2o4FNEGoeMX5Al2FgB+gvSQf072V3rN82JV83pgvoNfjcM59R9r9UrRuypyGJrNhrLW0HVVeVQdtB/e36FAfvuSPgf9ZS8YuDwDo+PMj+/59V5aiFjKVPQtpGvlzg4aPQE1NvqFNvxng2bEJr7YvZm7D8eHILX6cRlbKOkirLT3nipLvKS8HUAgnWQO6srTM9AxahEKdKVq/vXUOuxvClvkqoaA9EZLBzBiSVDfRIAHLSGYCSWpSLjI23ZZYH2j2B6rYHAq5PFgK7gVQ34vTDC00TBUu2zLMusOr7vo5TIh8Ex1B5zOdbsgaeOTjjcNpqW5gMWRj7Q== hocnetx
runcmd:
  - sed -i -e '/^Port/s/^.*$/Port 2726/' /etc/ssh/sshd_config
  - sed -i -e '$aAllowUsers hocnetx' /etc/ssh/sshd_config
  - service sshd restart
package_update: true
package_upgrade: true
packages:
  - software-properties-common
  - git
  - mercurial
power_state:
  timeout: 120
  delay: "+5"
  message: Rebooting in five minutes. Please save your work.
  mode: reboot
>>>>>>>>>>> CONFIG BASE <<<<<<<<

>>>>>>>>>>> CONFIG DOCKER <<<<<<<<
#cloud-config
users:
  - name: hocnetx
    groups: sudo
    shell: /bin/bash
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    ssh-authorized-keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAhbuqp5geHOCF2o4FNEGoeMX5Al2FgB+gvSQf072V3rN82JV83pgvoNfjcM59R9r9UrRuypyGJrNhrLW0HVVeVQdtB/e36FAfvuSPgf9ZS8YuDwDo+PMj+/59V5aiFjKVPQtpGvlzg4aPQE1NvqFNvxng2bEJr7YvZm7D8eHILX6cRlbKOkirLT3nipLvKS8HUAgnWQO6srTM9AxahEKdKVq/vXUOuxvClvkqoaA9EZLBzBiSVDfRIAHLSGYCSWpSLjI23ZZYH2j2B6rYHAq5PFgK7gVQ34vTDC00TBUu2zLMusOr7vo5TIh8Ex1B5zOdbsgaeOTjjcNpqW5gMWRj7Q== hocnetx
runcmd:
  - sed -i -e '/dns-nameservers 213.133.100.100 213.133.98.98 213.133.99.99/s/.*$/    dns-nameservers 1.1.1.1 1.0.0.1 213.133.99.99/' /etc/network/interfaces.d/50-cloud-init.cfg
  - sed -i -e '/^Port/s/^.*$/Port 2726/' /etc/ssh/sshd_config
  - sed -i -e '$aAllowUsers hocnetx' /etc/ssh/sshd_config
  - service sshd restart
package_update: true
package_upgrade: true
apt_sources:
  - source: "ppa:ansible/ansible"
packages:
  - software-properties-common
  - ansible
  - docker
  - docker.io
  - git
  - python-pip
power_state:
  timeout: 120
  delay: "+5"
  message: Rebooting in five minutes. Please save your work.
  mode: reboot
>>>>>>>>>>> CONFIG DOCKER <<<<<<<<
======= UBUNTU ==============================================================================================

https://195.201.226.171:8090/
admin
l8ukSbWLCIJWa6R&yh

iface eth0 inet dhcp
    dns-nameservers 213.133.100.100 213.133.98.98 213.133.99.99


pip install docker-py
service docker start
mkdir awx-install; cd awx-install
git clone https://github.com/ansible/awx.git
git clone https://github.com/ansible/awx-logos.git
cd awx/installer

localhost ansible_connection=local ansible_python_interpreter="/usr/bin/env python"

[all:vars]

# Remove these lines if you want to run a local image build
# Otherwise the setup playbook wants to install the official Ansible images. Version may
# be selected based on: latest, 1, 1.0, 1.0.0, 1.0.0.123
# by default the base will be used to search for ansible / awx_web and ansible / awx_task
dockerhub_base=ansible
dockerhub_version=latest

# This will create or update a default admin (superuser) account in AWX, if not provided
# then these default values are used
default_admin_user=xanubi
default_admin_password=Vertigo1...

# AWX Secret key
#It's * very * important that this stay the same between upgrades or you will lose the ability to decrypt
# your credentials
secret_key=meinsehrlangerundmitzahlenwie1234versehenersecretkey

# Openshift Install
# Will need to set -e openshift_password=developer -e docker_registry_password=$ (oc whoami -t)
# openshift_host=127.0.0.1: 8443
# awx_openshift_project=awx
# openshift_user=developer
# awx_node_port=30083

# Standalone Docker Install
# The datadir is adjusted so even after a blank of / tmp / the database still exists
postgres_data_dir=/tmp/pgdocker

# The port is adjusted so that the (Nginx) SSL proxy cleanly conveys
host_port=8052

# Required for Openshift when building the image on your own
# Optional for Openshift if using Dockerhub or another prebuilt registry
# Required for Standalone Docker Install if building the image on your own
# Optional for Standalone Docker Install if using Dockerhub or another prebuilt registry
# Define if you want the image pushed to a registry. The container definition wants to use these images
# docker_registry=172.30.1.1: 5000
# docker_registry_repository=awx
# docker_registry_username=developer

# Docker_image does not want to push to remote if the image already exists locally
# They are pushed to the remote repository
# docker_remove_local_images=False

# Set pg_hostname if you have an external postgres server, otherwise
# a new postgres service will be created
# pg_hostname=postgresql
pg_username=awx
pg_password=Vertigo1...
pg_database=awx
pg_port=5432

# Use a local distribution build AWX package
# This is helpful if you do not want to install the build-time dependencies as
#it is taken care of already.
# NOTE: IMPORTANT: If you are running a minishift install, use this container might not work
# if you are using certain drivers like KVM where the source tree can not be mapped
# into the build container.
# This setting must be set to False which will trigger a local build. To view the
# typical dependencies that you might need to install see:
# installer / image_build / files / Dockerfile.sdist
# use_container_for_build=true

# Build AWX with official logos
# Requires cloning awx-logos repo into the project root.
# Review the trademark guidelines at https://github.com/ansible/awx-logos/blob/master/TRADEMARKS.md
# awx_official=false

# Proxy
# Http_proxy=http: // proxy: 3128
# Https_proxy=http: // proxy: 3128
# No_proxy=mycorp.org

# Container networking configuration
# Set the awx_task and awx_web containers' search domain (s)
# Awx_container_search_domains=example.com, ansible.com

cd /root/awx-install/awx/installer
ansible-playbook -i inventory install.yml
apt-get install nginx -y
openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/nginx-selfsigned.key -out /etc/ssl/certs/nginx-selfsigned.crt
openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048

mysql_secure_installation
CREATE USER 'webdb'@'%' IDENTIFIED BY 'DOoKhoE_CPIsj6l1';
GRANT ALL ON jesus.* TO 'webdb'@'%';
